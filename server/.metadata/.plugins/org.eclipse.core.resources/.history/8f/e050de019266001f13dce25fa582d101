package com.example.payment_microservice.service;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.kafka.annotation.KafkaListener;
import org.springframework.kafka.core.KafkaTemplate;
import org.springframework.stereotype.Service;

import com.example.payment_microservice.model.Payment;
import com.example.payment_microservice.repository.PaymentRepository;

import java.util.HashMap;
import java.util.Map;

@Service
public class PaymentService {

    @Autowired
    private PaymentRepository paymentRepository;

    @Autowired
    private KafkaTemplate<String, Map<String, Object>> kafkaTemplate;

    private static final String TOPIC = "T2";

    public Payment processPayment(Payment payment) {
        payment.setStatus("Success"); // Simplified logic for demo purposes
        Payment savedPayment = paymentRepository.save(payment);

        // Send message to Kafka Topic T2
        Map<String, Object> message = new HashMap<>();
        message.put("bookingId", savedPayment.getBookingId());
        message.put("status", savedPayment.getStatus());

        kafkaTemplate.send(TOPIC, message);

        return savedPayment;
    }

    @KafkaListener(topics = "T1", groupId = "group_id")
    public void consume(Map<String, Object> message) {
        // Process payment from T1 topic
        System.out.println("Received message: " + message);
        Long bookingId = (Long) message.get("bookingId");
        String paymentMode = (String) message.get("paymentMode");
        double amount = (double) message.get("amount");

        // Process payment logic here...
        Payment payment = new Payment();
        payment.setBookingId(bookingId);
        payment.setAmount(amount);
        payment.setStatus("Success"); // or "Failed"

        paymentRepository.save(payment);
    }
}